###############################################################################
###############################################################################
#
# SERVICE TEMPLATES
#
###############################################################################
###############################################################################

# #failure_prediction_enabled 1          Is no longer used in Nag4 leaving here for a note to that fact


# Generic service definition template - This is NOT a real service, just a template!

define service {
name				generic-service 	; The 'name' of this service template
active_checks_enabled		1       		; Active service checks are enabled
passive_checks_enabled		1    		   	; Passive service checks are enabled/accepted
parallelize_check		1       		; Active service checks should be parallelized (disabling this can lead to major performance problems)
obsess_over_service		0       		; We should obsess over this service (if necessary)
check_freshness			0       		; Default is to NOT check service 'freshness'
notifications_enabled		1       		; Service notifications are enabled
event_handler_enabled		1       		; Service event handler is enabled
flap_detection_enabled		1       		; Flap detection is enabled
process_perf_data		1       		; Process performance data
retain_status_information	1       		; Retain status information across program restarts
retain_nonstatus_information	1       		; Retain non-status information across program restarts
is_volatile			0       		; The service is not volatile
check_period			24x7			; The service can be checked at any time of the day
max_check_attempts		4			; Re-check the service up to 3 times in order to determine its final (hard) state
normal_check_interval		15			; Check the service every 15 minutes under normal conditions
retry_check_interval		5			; Re-check the service every five minutes until a hard state can be determined
contact_groups			nagios-team		; Notifications get sent out to everyone in the 'admins' group
notification_options		w,u,c,r			; Send notifications about warning, unknown, critical, and recovery events
notification_interval		0			; Only one email per incident
notification_period		24x7			; Notifications can be sent out at any time
register			0       		; DONT REGISTER THIS DEFINITION - ITS NOT A REAL SERVICE, JUST A TEMPLATE!
}


define service {
use			generic-service
name			disk-service
normal_check_interval	30
register		0
}

define service {
name                            local-service           ; The 'name' of this service template
active_checks_enabled           1                       ; Active service checks are enabled
passive_checks_enabled          1                       ; Passive service checks are enabled/accepted
parallelize_check               1                       ; Active service checks should be parallelized (disabling this can lead to major performance problems)
obsess_over_service             0                       ; We should obsess over this service (if necessary)
check_freshness                 0                       ; Default is to NOT check service 'freshness'
notifications_enabled           1                       ; Service notifications are enabled
event_handler_enabled           1                       ; Service event handler is enabled
flap_detection_enabled          1                       ; Flap detection is enabled
process_perf_data               1                       ; Process performance data
retain_status_information       1                       ; Retain status information across program restarts
retain_nonstatus_information    1                       ; Retain non-status information across program restarts
is_volatile                     0                       ; The service is not volatile
check_period                    24x7                    ; The service can be checked at any time of the day
max_check_attempts              3                       ; Re-check the service up to 3 times in order to determine its final (hard) state
normal_check_interval           15                      ; Check the service every 15 minutes under normal conditions
retry_check_interval            5                       ; Re-check the service every five minutes until a hard state can be determined
contact_groups                  nagios-team             ; Notifications get sent out to everyone in the 'admins' group
notification_options            w,u,c,r                 ; Send notifications about warning, unknown, critical, and recovery events
notification_interval           0                       ; Only one email per incident
notification_period             24x7                    ; Notifications can be sent out at any time
register                        0                       ; DONT REGISTER THIS DEFINITION - ITS NOT A REAL SERVICE, JUST A TEMPLATE!
}

define service {
use	generic-service
name	fresh-service
service_description	checking freshness
check_freshness	1
register	0
}

###############################################################################
# Appserver Services
###############################################################################


#------------------------------------------------------------------------------
# Part 1: Services that vary from site to site and are configured only as
#         templates here
#------------------------------------------------------------------------------

# --- New Appserver tests ---

#define service {
#	name			parse-log-service
#	service_description	PLS_Log_Parser
#	use			generic-service
#	normal_check_interval	60
#	max_check_attempts	1
#	notification_period	no-wee-hours
#	notifications_enabled	0
#	check_command		gwn-parse-log!100!50
#	host_name		appserver.wmc.gwn, \
#				appserver.usc.gwn
#}


# --- RAID Service definitions ---

define service {
name			raid-service
use			generic-service
normal_check_interval	180
retry_check_interval	10
contact_groups          platform-tickets,nagios-team
notification_period	no-wee-hours
register		0
        }


define service {
name			sw-raid-service
use			raid-service
service_description	ServerRaid-Software
check_command		gwn-check-swraid
contact_groups          platform-tickets,nagios-team
register		0
}


define service {
name			perc4-raid-service
use			raid-service
service_description	ServerRaid-Perc4
check_command		gwn-check-perc4raid
contact_groups          platform-tickets,nagios-team
register		0
	}



define service {
name			perc5-raid-service
use			raid-service
host_name		!appserver.sletest.gwn
service_description	ServerRaid-Perc5
check_command		gwn-check-perc5raid
contact_groups          platform-tickets,nagios-team
register		0
}



define service {
name			perc6-raid-service
use			raid-service
service_description	ServerRaid-Perc6
check_command		gwn-check-perc5raid	; No typo! Uses the same test
contact_groups          platform-tickets,nagios-team
register		0
}


# For new Ubuntu servers, we rename the check, because it is all the same binary
define service {
name			perc-raid-service
use			raid-service
host_name		!appserver.sletest.gwn
service_description	ServerRaid-Perc
check_command		gwn-check-percraid	; No typo! Uses the same test
contact_groups          platform-tickets,nagios-team
register		0
}



# --- ATFTP service for C9 sites ---

define service {
name			tftpd-service
use			generic-service
service_description	ATFTPD
check_command		check-procs!in.tftpd
normal_check_interval	60
retry_check_interval	10
register		0
}


# --- APC UPS service for G3 appservers ---

define service {
name			apcups-service
use			generic-service
service_description	APC_UPS
check_command		check-apcups
normal_check_interval	60
retry_check_interval	10
register		0
}





#------------------------------------------------------------------------------
# Part 3: Services that are on every appserver: defined as wildcard service
#------------------------------------------------------------------------------

# The old, absolute load check, discontinued (2/15/18)
#define service {
#name			load-service
#use			generic-service
#host_name		appserver.*.gwn,colossus.hq,vls?.*.gwn,apptest.*.gwn,mobileremote.cloud,ras[1-2].*.gwn
#service_description	Server_Load
#check_command		check-load!9,8,7!15,12,10
#}

## Better CPU load check, based on core count with new values (y = c * p /100)
define service {
name			load-percpu-service
use			generic-service
host_name		appserver.*.gwn,vls?.*.gwn,apptest.*.gwn,ras[1-2].*.gwn
service_description	Server_Load_PerCPU
check_command		check-load-percpu!0.80,0.77,0.75!0.95,0.93,0.90
}


define service {
name			ntpd-service
use			generic-service
host_name		services.hq,nagios.hq
service_description	NTPD
check_command		check-ntp
}


define service {
name			ntpd-service-nrpe
use			generic-service
host_name		!appserver.mubhp.gwn,appserver.*.gwn,apptest.*.gwn
service_description	NTPD
check_command		check-ntp-nrpe!-4!10!60
event_handler           restart-service!ntp
}


define service {
name			squid3-service
use			generic-service
host_name		appserver.*.gwn
service_description	Squid_Proxy
check_command		check-procs!squid3
event_handler restart-service!squid3
}


define service {
name			cron-service
use			generic-service
host_name		appserver.*.gwn, \
			vls?.*.gwn,apptest.*.gwn
service_description	Cron_Daemon
check_command		check-procs!cron
event_handler restart-service!cron
}


# Check disabled for the upcoming corporate website move
#define service {
#name			dns-service
#use			generic-service
#host_name		services.hq,dns2.hq
#service_description	DNS
#check_command		check-dns
#}


# Check disabled for the upcoming corporate website move
define service {
name			dns-service-nrpe
use			generic-service
#host_name		!appserver.cla.gwn,appserver.*.gwn
hostgroup_name		!_FacTest_
service_description	DNS
check_command		check-dns-nrpe!www.getwellnetwork.com!52.54.81.8
}


define service {
  name			disk-root-service
  use			disk-service
  host_name		appserver.*.gwn,apptest.*.gwn,ras1.*.gwn,ras2.*.gwn,mobileremote.cloud
  service_description	DiskRootPartition
  check_command		check_disk!8%!5%!/
  contact_groups  nagios-team
}

define service {
  name                  swap-utilization
  use                   generic-service
#  host_name             appserver.*.gwn,apptest.*.gwn,ras1.*.gwn,ras2.*.gwn,mobileremote.cloud
  host_name             ras1.kpsctest.gwn,ras2.kpsctest.gwn,ras1.kpnctest.gwn,ras2.kpnctest.gwn,\
                        ras1.kpnc-e.gwn,ras2.kpnc-e.gwn,ras1.kpsc-e.gwn,ras2.kpsc-e.gwn
  service_description   SwapUtilization
  check_command         check_swap!20%!10%
}

define service {
  name      disk-getsmart-check
  use     disk-service
  host_name   server-01.cloud
  service_description Disk GetSmart Partition
  check_command   check_disk!11000!10000!/mnt/getsmart
  contact_groups  linux-team
}

define service {
  name      disk-var-data-check
  use     disk-service
  host_name   server-01.cloud
  service_description Disk /var/data Partition
  check_command   check_disk!3000!2000!/var/data 
  contact_groups  linux-team
}

define service {
  name      disk-root-check
  use     disk-service
  host_name   server-01.cloud
  service_description Disk root Partition
  check_command   check_disk!2000!1000!/
  contact_groups  linux-team
}

define service {
  name      disk-rootsize-service
  use     disk-service
  host_name   appserver.*.gwn,apptest.*.gwn,ras1.*.gwn,ras2.*.gwn,mobileremote.cloud
  service_description DiskRootPartitionSize
  check_command   check_disk!2000!1000!/
  notifications_enabled  0
}

define service {
name			disk-opt-service
use			disk-service
host_name		appserver.*.gwn,apptest.*.gwn,ras1.*.gwn,ras2.*.gwn
service_description	DiskOptPartition
check_command		check_disk!15%!10%!/opt
}


define service {
name			jboss-files-open
use			generic-service
host_name		appserver.*.gwn,apptest.*.gwn
service_description	JBoss7FilesOpen
check_command		gwn-check-jboss-files
}

define service {
name			mailq-service
use			generic-service
host_name		!appserver.mubhp.gwn,appserver.*.gwn
service_description	MailQueue
normal_check_interval	60
check_period		workhours
check_command		check-mailq!15!30
contact_groups nagios-team
}



#------------------------------------------------------------------------------
# Part 4: Services that are on every dbserver: defined as wildcard service
#         Used to be 'db.XXX.gwn', but was merged back to 'appserver' (PLATSUP-26364)
#------------------------------------------------------------------------------

define service {
name			mysqld-service
use			generic-service
host_name		appserver.*.gwn,db1.hq
service_description	MySQL
check_command		check-mysql-nrpe!nagios!n@g10s
normal_check_interval	5
retry_check_interval	2
}





#------------------------------------------------------------------------------
# Part 4.1: Services that are on every hans/franz RAS server as wildcard service
#------------------------------------------------------------------------------

define service {
name                    perc-raid-service-ras
use                     raid-service
host_name		        !ras1.usc.gwn,!ras2.usc.gwn,!ras1.asm.gwn,!ras2.asm.gwn,!ras1.rrm.gwn,!ras2.rrm.gwn,!ras1.lgh-e.gwn,!ras2.lgh-e.gwn,!ras1.inv-e.gwn,!ras2.inv-e.gwn,!ras1.chd-e.gwn,!ras2.chd-e.gwn,!ras1.chco.gwn,!ras2.chco.gwn,!ras1.svin-e.gwn,!ras2.svin-e.gwn,!ras1.ccmc.gwn,!ras2.ccmc.gwn,!ras1.stfr.gwn,!ras2.stfr.gwn,!ras1.usck.gwn,!ras2.usck.gwn,!ras1.epc.gwn,!ras1.cim.gwn,!ras2.cim.gwn,!apptest.swcsl.gwn,!ras1.swcsl.gwn,!ras2.swcsl.gwn,!ras1.svm.gwn,!ras2.svm.gwn,!ras1.umc.gwn,!ras2.umc.gwn,!ras1.ohs.gwn,!ras2.ohs.gwn,!ras1.lbm.gwn,!ras2.lbm.gwn,!ras1.hnmc.gwn,!ras2.hnmc.gwn,!ras1.hoa.gwn,!ras2.hoa.gwn,!ras1.cmm.gwn,!ras2.cmm.gwn,!ras1.wfbm.gwn,!ras2.wfbm.gwn,!apptest.wfbm.gwn,!ras1.stam.gwn,!ras2.stam.gwn,!ras1.lpc.gwn,!ras2.lpc.gwn,!ras1.mhn-e.gwn,!ras2.mhn-e.gwn,ras1.*.gwn, ras2.*.gwn
service_description     ServerRaid-Perc-RAS
check_command           gwn-check-percraid     ; No typo! Uses the same test
contact_groups          platform-tickets,nagios-team
}


#------------------------------------------------------------------------------
# Part 5: JBoss service and SysInfo Checks
#------------------------------------------------------------------------------

define service {
name			jboss-service
use			generic-service
host_name               !apptest.fhs-e.gwn,appserver.*.gwn,apptest.*.gwn
service_description	JBoss
check_command		check-sysinfo!com.gwn.plife.sysinfo.checks.AppVersionCheck!0!0
normal_check_interval	5
retry_check_interval	2
contact_groups          platform-tickets,nagios-team,rse-alert
}


define service {
name			appMemory-service-new
use			generic-service
host_name		!apptest.fhs-e.gwn,appserver.*.gwn,apptest.*.gwn
max_check_attempts	5
service_description	AppMemory
check_command		check-sysinfo!com.gwn.plife.sysinfo.checks.AppMemoryCheck!10!5
}

define service {
name			appVersion-service-new
use			generic-service
host_name		!apptest.fhs-e.gwn,appserver.*.gwn,apptest.*.gwn
service_description	AppVersion
check_command		check-sysinfo!com.gwn.plife.sysinfo.checks.AppVersionCheck!0!0!R5_7_14
normal_check_interval	60
}




# ---------------------------------------------------------------------------------------
# APP PLC CHECK
#
# Ugh, apparently, the VA does often turn unused PLCs off so they were constantly lit up
# in Nagios. Per PLATSUP-26931, we are splitting the AppPlcStatus check into non-VA and
# VA sites. The VA sites get a lower threshold. Remember to add any VA site to both the
# _exclude list_ on one check and the _include list_ on the other.
#
# Clarification on the values: critValue must be less than warnValue, because 100% is good.
# Moving the threshold down from 100%, we'll first go into WARNING state (for example
# if warnValue=95: if only 94% alive --> WARNING). Going further down, we'll fall into
# CRITICAL state (example: critValue=90: if less than 90% are alive, be CRITICAL).
# ---------------------------------------------------------------------------------------

# DIRECTIVE FROM SEAN ON March 2, 2018: TURN THIS CHECK OFF ALTOGETHER UNTIL PLS IS FIXED (ICS-1211, ICS-1198)
#
#define service {
#	name			appPlcStatus-service
#	use			generic-service
#	host_name		!appserver.biv.gwn, !appserver.bpv.gwn, !appserver.ctxv.gwn, !appserver.eov.gwn, !appserver.erv.gwn, !appserver.farv.gwn, !appserver.ftbv.gwn, !appserver.gaiv.gwn, !appserver.kerv.gwn, !appserver.lav.gwn, !appserver.lcv.gwn, !appserver.lebv.gwn, !appserver.lfv.gwn, !appserver.marv.gwn, !appserver.mdv.gwn, !appserver.miav.gwn, !appserver.ntxv.gwn, !appserver.orlv.gwn, !appserver.phov.gwn, !appserver.pijv.gwn, !appserver.prsv.gwn, !appserver.rayv.gwn, !appserver.ricv.gwn, !appserver.samv.gwn, !appserver.sdv.gwn, !appserver.sfv.gwn, !appserver.sjv.gwn, !appserver.stxv.gwn, !appserver.tamv.gwn, !appserver.wacv.gwn, !appserver.wdcv.gwn, !appserver.wilv.gwn, !appserver.wpbv.gwn, !appserver.wtxv.gwn, \
#				appserver.*.gwn
#	hostgroup_name		!_FacTest_, !_HQ_
#	service_description	AppPlcStatus
#	check_command		check-sysinfo!com.gwn.plife.sysinfo.checks.DisplayDeviceStatusCheck!96!95
#	normal_check_interval	15
#	max_check_attempts	2
#}
#
#define service {
#	name			appPlcStatus-service-va
#	use			generic-service
#	host_name		appserver.biv.gwn, appserver.bpv.gwn, appserver.ctxv.gwn, appserver.eov.gwn, appserver.erv.gwn, appserver.farv.gwn, appserver.ftbv.gwn, appserver.gaiv.gwn, appserver.kerv.gwn, appserver.lav.gwn, appserver.lcv.gwn, appserver.lebv.gwn, appserver.lfv.gwn, appserver.marv.gwn, appserver.mdv.gwn, appserver.miav.gwn, appserver.ntxv.gwn, appserver.orlv.gwn, appserver.phov.gwn, appserver.pijv.gwn, appserver.prsv.gwn, appserver.rayv.gwn, appserver.ricv.gwn, appserver.samv.gwn, appserver.sdv.gwn, appserver.sfv.gwn, appserver.sjv.gwn, appserver.stxv.gwn, appserver.tamv.gwn, appserver.wacv.gwn, appserver.wdcv.gwn, appserver.wilv.gwn, appserver.wpbv.gwn, appserver.wtxv.gwn
#	hostgroup_name		!_FacTest_, !_HQ_
#	service_description	AppPlcStatus
#	check_command		check-sysinfo!com.gwn.plife.sysinfo.checks.DisplayDeviceStatusCheck!20!15
#	normal_check_interval	15
#	max_check_attempts	2
#}






define service {
name			appPathwayEngine-service-new
use			generic-service
host_name		appserver.*.gwn,apptest.*.gwn
hostgroup_name		!_FacTest_
service_description	AppPathwayEngine
check_command		check-sysinfo!com.gwn.plife.sysinfo.checks.PathwayEngineCheck!79!80
normal_check_interval	180
}


define service {
name			appDbConnections-service-new
use			generic-service
host_name		appserver.*.gwn,apptest.*.gwn
hostgroup_name		!_FacTest_
service_description	AppDbConnections
check_command		check-sysinfo!com.gwn.plife.sysinfo.checks.DbConnectionCheck!11!10
}


# This is the new, universal HL7 check that asks PLS about the status of all configured interfaces.
define service {
name                    appHl7Status-combined
use                     generic-service
host_name               appserver.*.gwn
hostgroup_name          !_FacTest_, !SJV, !_HQ_
service_description     AppHl7StatusNotifications
normal_check_interval   30
notification_period     24x7
check_command           check-sysinfo!com.gwn.plife.sysinfo.checks.Hl7Check
}


define service {
name			appDataTransfer-service-new
use			generic-service
host_name		appserver.*.gwn,apptest.*.gwn
service_description	AppDataTransfer
normal_check_interval	720
retry_check_interval	30
notification_period	workhours
check_command		check-sysinfo!com.gwn.plife.sysinfo.checks.DataTransferServiceCheck!1!2
}


define service {
name			appLdapConnection-service-new
use			generic-service
host_name		!appserver.dch.gwn,!appserver.mubhp.gwn,appserver.*.gwn
hostgroup_name		!_FacTest_
service_description	AppLdapConnection
normal_check_interval	60
retry_check_interval	30
max_check_attempts	5
check_command		check-sysinfo!com.gwn.plife.sysinfo.checks.LdapSocketConnectionCheck!0!0
}


# InfoServlet dependencies
# ----------------------------------------------------------------------------

define servicedependency {
host_name			!appserver.dch.gwn,!appserver.mubhp.gwn,appserver.*.gwn
hostgroup_name			!_FacTest_, !_HQ_
service_description		JBoss
dependent_service_description	AppMemory, AppVersion, AppDbConnections, \
					AppPathwayEngine, \
					AppDataTransfer, JBoss7FilesOpen, AppLdapConnection
	execution_failure_criteria	c,u,p
	notification_failure_criteria	w,u,c,p
	inherits_parent			1
}





#------------------------------------------------------------------------------
# Part 6: JANA servers, based on hostname wildcard
#------------------------------------------------------------------------------

define service {
	name			jana-service
	use			generic-service
	host_name		jana*.*.gwn
	service_description	JanaService
	normal_check_interval	60
	check_command		check-jana
	}




###############################################################################
# Analog Videoserver Services
###############################################################################


#define service {
#	name			vidtcp-service
#	use			generic-service
#	host_name		!dvp1.vma.gwn,!dvp2.vmh.gwn,!dvp1.vmt.gwn,\
#				dvp?.*.gwn
#	service_description	VIDTCP
#	check_command		check-vidtcp
#	retry_check_interval	2
#}



#define service {
#	name			disk-service-nt-c
#	use			disk-service
#	host_name		dvp?.*.gwn
#	service_description	DiskDriveC
#	check_command		check_nt!USEDDISKSPACE!C!90%!95%
#}



#define service {
#	name			disk-service-nt-d
#	use			disk-service
#	host_name		dvp?.*.gwn
#	service_description	DiskDriveD
#	check_command		check_nt!USEDDISKSPACE!D!95%!98%
#}



###############################################################################
# Generic Streaming Videoserver Services
###############################################################################

define service {
	name			disk-boot-service-vls
	use			disk-service
	host_name		vls?.*.gwn
	contact_groups	nagios-team
	service_description	DiskBootPartition
	check_command		check_disk!8%!5%!/boot
}


define service{
	name			disk-root-service-vls
	use			disk-service
	host_name		vls?.*.gwn
  contact_groups  nagios-team
	service_description	DiskRootPartition
	check_command		check_disk!8%!5%!/
}

define service{
	name			disk-opt-service-vls
	use			disk-service
	host_name		vls?.*.gwn
	service_description	DiskOptPartition
	check_command		check_disk!3%!2%!/opt
	contact_groups		digital-media,nagios-team
}



###############################################################################
# HTTP Streaming Videoserver Services
###############################################################################


# Must define the host names manually, since we will migrate...
define service {
	name			http-service
	use			generic-service
	host_name		!vls1.sea.gwn,!vls2.sea.gwn,vls?.*.gwn
	service_description	HTTP_Streaming
	check_command		check_http!-j HEAD -u "/opt/Media/Library/library.xml" -e "HTTP/1.0 200,HTTP/1.1 200"
	retry_check_interval	2
}


##############################################################################
# Custom ghetto checks written by Will Schneider
##############################################################################
define service {
	name			exec-dashboard-utilization
	use			generic-service
	host_name		services.hq
	service_description	Executive_Dashboard_Utilization	
	check_command		check_ExecDashboard_utilization
}

define service {
        name                    sshd-check
        use                     generic-service
        host_name               freenas.hq
        service_description     sshd-AliveCheck
        check_command           check-ssh
        notification_period     no-wee-hours
}


# -------------------------------------------------------------------
# CUSTOM SSL CERTIFICATE CHECK
# New check for custom SSL certificates that requires the hostname to
# query Nginx for the correct certificate (using SNI)
define service{
    name                         mc-custom-ssl-expire-check
    service_description          Custom MC SSL Certificate
    use                          generic-service
    check_period                 server_daily_check
    check_interval               1440
    retry_interval               180
    max_check_attempts           3
    notifications_enabled        1
    contacts                     devops-warning
    contact_groups               nagios-team
    register                     0
}


define timeperiod{
    timeperiod_name        	 server_daily_check
    alias                        Half Hour Period for scheduled task checks
    sunday                       09:00-09:30
    monday                       09:00-09:30
    tuesday                      09:00-09:30
    wednesday                    09:00-09:30
    thursday                     09:00-09:30
    friday                       09:00-09:30
    saturday                     09:00-09:30
}

# Salt minion service check 
define service{
    name                         salt-minion-check
    service_description          salt-minion
    check_command                check-salt-minion
    notification_options         c,r
    notifications_enabled        1
    parallelize_check               1
    check_period			24x7
    max_check_attempts		4
    normal_check_interval		15
    retry_check_interval		5
    notification_period		24x7
    contact_groups               linux-team
    event_handler_enabled        1
    process_perf_data            1
    retain_status_information    1
    retain_nonstatus_information 1
    obsess_over_service          0
    check_freshness              0
    flap_detection_enabled       1
    register                     0
}

define service {
        use salt-minion-check
        host_name !apptest.crle.gwn,\
	!vls1.som.gwn,!vls1.txwe.gwn,!vls1.che.gwn,!vls2.vbh.gwn,\
	!vls1.vmh.gwn,!vls1.vvw.gwn,appserver.*.gwn,vls?.*.gwn
				event_handler  restart-service!salt-minion
}

# Marbella Census Check
define service{
    name                         marbella-census-check
    service_description          Marbella Census
    check_command                marbella-census
    notification_options         c,r
    notifications_enabled        1
    parallelize_check               1
    check_period                        24x7
    max_check_attempts          4
    normal_check_interval               15
    retry_check_interval                5
    notification_period         24x7
    contact_groups               nagios-team
    event_handler_enabled        1
    process_perf_data            1
    retain_status_information    1
    retain_nonstatus_information 1
    obsess_over_service          0
    check_freshness              0
    flap_detection_enabled       1
    register                     0
}

# Removing per - http://jira.gwn/browse/PLATSUP-24375
#define service {
#     name unscd_alive
#     use generic-service
#     check_command check_unscd
#     description Check unscd is alive
#     host_name !vls1.mch.gwn,!vls2.mch.gwn,appserver.*.gwn,ras1.*.gwn,ras2.*.gwn,vls?.*.gwn
#		 event_handler	restart-service!unscd 
#}

define service {
     name nslcd_alive
     use generic-service
     check_command check_nslcd
     description Check nslcd is alive
     host_name !vls1.mch.gwn,!vls2.mch.gwn,appserver.*.gwn,ras1.*.gwn,ras2.*.gwn,vls?.*.gwn
     event_handler  restart-service!nlscd
}

define service {
     name cmm_alive
     use generic-service
     check_command check_cmm_401
     description See if Auth is alive
     notification_options         c,r
     notifications_enabled        1
     contact_groups cmm_alert
     host_name cmm-master.hq
}    

define service {
	name	crossbar-controller
	use		generic-service
	check_command check_crossbar-controller!crossbar-contro!1:180!1:190
	description Verify the crossbar.io Controller is running
  host_name	appserver.wmc.gwn,appserver.coc.gwn,appserver.dch.gwn,appserver.sjc.gwn,appserver.car.gwn,appserver.cenh.gwn,appserver.kgar.gwn,appserver.kpsc-e.gwn,appserver.ocm.gwn,appserver.smmc.gwn
  notifications_enabled 1
}

define service {
  name  crossbar-worker
  use   generic-service
  check_command check_crossbar-worker!crossbar-worker!1:180!1:190
  description Verify the crossbar.io worker is running
  host_name appserver.wmc.gwn,appserver.coc.gwn,appserver.dch.gwn,appserver.sjc.gwn,appserver.car.gwn,appserver.cenh.gwn,appserver.kgar.gwn,appserver.kpsc-e.gwn,appserver.ocm.gwn,appserver.smmc.gwn
  notifications_enabled 1
}

define service {
	name check-https
	use generic-service
	check_command check_https
	description Verify HTTPS access
    host_name	drac.*.gwn
	notification_options	c,r
    contact_groups linux-team
}

define service {
	name	check-mc-https
	use		generic-service
	check_command	check_mc_alive_https
	description	Verify MC HTTPS is alive
	host_name	!appserver.mubhp.gwn,appserver.*.gwn
  contact_groups linux-team 
}

define service {
  name  check-mc-http
  use   generic-service
  check_command check_mc_alive_http
  description Verify MC HTTP is alive
  host_name  !appserver.mubhp.gwn,!appserver.sea.gwn, appserver.*.gwn
  contact_groups linux-team
}

define service {
  name check-https-401
  use  generic-service
  check_command check_https_401
  description Verify HTTPS/443 is alive
  host_name freenas.hq
  notification_options u,c,r
  notification_period     no-wee-hours
}

define service{
    name                         nagios-process-check
    notification_options         w,u,c,r
    notifications_enabled        1
    parallelize_check               1
    check_period      24x7
    max_check_attempts    3
    normal_check_interval   15
    retry_check_interval    5
    notification_period   24x7
    contact_groups               linux-team
    event_handler_enabled        1
    process_perf_data            1
    retain_status_information    1
    retain_nonstatus_information 1
    obsess_over_service          0
    check_freshness              0
    register                     0
}

define service {
	name      NagiosMailQueue
	use     nagios-process-check
	host_name   Nagios
	service_description MailQueue
	normal_check_interval 60
	check_command   check-mailq-nagios!10!20
}


